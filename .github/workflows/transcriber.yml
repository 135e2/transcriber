name: "transcriber"

on:
  workflow_dispatch:
    inputs:
      audioURL:
        description: "Audio file URL"
        required: true
        type: string
      whisperModel:
        description: "The model size for whisper, default is base. For more details, checkout https://github.com/openai/whisper#available-models-and-languages"
        default: "base"
        type: string
      targetLanguage:
        description: "The target language for translation, default is zh (Chinese)"
        default: "zh"
        type: string
      translateProvider:
        description: "The translate provider for translation, default is caiyun"
        default: "caiyun"
        type: string

jobs:
  transcribe:
    name: "Transcribe"
    runs-on: ubuntu-latest
    container: ${{ github.repository }}:master
    env:
      audioURL: ${{ inputs.audioURL }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Update Archlinux repo
        run: pacman -Syu --noconfirm noto-fonts-cjk
      - name: Download audio file
        run: |
          mkdir -p workdir
          cd workdir
          echo "Downloading audio..."
          filename=$(curl -sJOL ${audioURL} -w "%{filename_effective}")
          filename_base=${filename%.*}
          echo "filename=${filename}" >> $GITHUB_ENV
          echo "filename_base=${filename_base}" >> $GITHUB_ENV
          echo "Downloaded file: ${filename}"
      - name: Whisper!
        working-directory: ./workdir
        run: |
          whisper --model ${{ inputs.whisperModel }} ${{ env.filename }}
      - name: Translate srt subtitles
        working-directory: ./workdir
        run: |
          echo "Installing deps..."
          pip install -r ../scripts/requirements.txt
          echo "Translating..."
          python3 ../scripts/translate.py -tl ${{ inputs.targetLanguage }} -tp ${{ inputs.translateProvider }} ${{ env.filename }}.srt
      - name: Generate videos with/without subtitle
        working-directory: ./workdir
        run: |
          if [[ $(file -bi ${{ env.filename }}) == video/* ]]; then # Determine filetype
            echo "Detected input as a video file, skipping video generation..."
          else
            echo "Generating videos using ffmpeg..."
            ffmpeg -f lavfi -i color=c=black:s=1920x1080:r=5 -i ${{ env.filename }} -crf 0 -c:a copy -shortest ${{ env.filename_base }}.orig.mp4
          fi
          ffmpeg -i ${{ env.filename_base }}.orig.mp4 -vf subtitles=${{ env.filename }}_${{ inputs.targetLanguage }}-${{ inputs.translateProvider }}.srt ${{ env.filename_base }}-sub.mp4
          echo "Deleting redundant files..."
          rm -v ${{ env.filename_base }}.orig.mp4
          cd ..
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: workdir/
          name: ${{ env.filename_base }}
